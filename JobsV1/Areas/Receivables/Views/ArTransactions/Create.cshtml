@model ArModels.Models.ArTransaction

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>ArTransaction</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.ArAccountId, "Account", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("ArAccountId", null, htmlAttributes: new { @class = "form-control", id = "ArAccountId" })
            @Html.ValidationMessageFor(model => model.ArAccountId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DtService, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DtService, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DtService, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DtServiceTo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DtServiceTo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DtServiceTo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.InvoiceRef, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.InvoiceRef, new { htmlAttributes = new { @class = "form-control", @maxlength = "10" } })
            @Html.ValidationMessageFor(model => model.InvoiceRef, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group" hidden>
        @Html.LabelFor(model => model.InvoiceId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.InvoiceId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.InvoiceId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DtInvoice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DtInvoice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DtInvoice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @maxlength = "80" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.DtEncoded, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DtEncoded, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DtEncoded, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DtDue, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DtDue, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DtDue, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @maxlength = "10" } })
            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Interval, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Interval, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Interval, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.IsRepeating, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsRepeating, new { htmlAttributes = new { @style = "margin-left:0px;", id = "chkbox-IsReapeating" } })
                @Html.ValidationMessageFor(model => model.IsRepeating, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control", @maxlength = "120" } })
            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.PrevRef, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PrevRef, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PrevRef, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.NextRef, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NextRef, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NextRef, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ArTransStatusId, "Status", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("ArTransStatusId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ArTransStatusId, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.ArCategoryId, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("ArCategoryId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ArCategoryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id="warning-message">
        <div class="col-md-offset-2 col-md-10">
            <p class="text-danger" id="warning-message-text">  </p>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" id="submit-btn" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts{
    <script src="~/Areas/Receivables/Scripts/Transactions/Transaction.js"></script>

        <script>
            async function GetAccountCreditLimit() {
                var accountId = $('#ArAccountId :selected').val();
                
                await $.get('/Receivables/ArTransactions/CheckAccountCredit', { id: accountId }, (response) => {

                    console.log(response);
                    
                    let creditLimit = (parseInt(response['CreditLimit']));
                    let creditWarning = (parseInt(response['CreditWarning']));
                    let creditOverLimit = creditLimit + (parseInt(response['OverLimitAllowed']));
                    let amount_val = parseInt($('input[name="Amount"]').val());
                   
                    console.log(amount_val + " >= " + creditLimit);
                    console.log(creditOverLimit + " >= " + creditLimit);

                    //init
                    $('#warning-message').hide();
                    $("#submit-btn").prop('disabled', false);

                    //credit warning reached
                    let cond_creditWarningLimit = amount_val >= creditWarning;
                    console.log("check credit warning :" + cond_creditWarningLimit);
                    if (cond_creditWarningLimit) {
                        var account = $('#ArAccountId :selected').text();

                        //display warning message on credit limit
                        $('#warning-message').show();
                        $('#warning-message-text').text(account + " account credit warning is " + creditWarning);
                    } 


                    //credit limit
                    let cond_creditLimit = (amount_val >= creditLimit);
                    console.log("check credit limit :" + cond_creditLimit);
                    if (cond_creditLimit) {
                        var account = $('#ArAccountId :selected').text();
                        //disable submit button
                        //$("#submit-btn").prop('disabled', true);

                        //display warning message on credit limit
                        $('#warning-message').show();
                        $('#warning-message-text').text(account + " account credit limit is " + creditLimit);
                    } 

                    //credit warning reached
                    let cond_creditOverLimit = (amount_val >= creditOverLimit);
                    console.log("check credit overlimit :" + cond_creditOverLimit);
                    if (cond_creditOverLimit) {
                        var account = $('#ArAccountId :selected').text();
                        //disable submit button
                        //$("#submit-btn").prop('disabled', true);

                        //display warning message on credit limit
                        $('#warning-message').show();
                        $('#warning-message-text').text(account + " account reached the credit over limit: " + creditLimit);
                    } 

                    return creditLimit;
                });
            }

           $('input[name="Amount"]').on('input', async function () {

              GetAccountCreditLimit();
            
           });
            
           $('input[name="Interval"]').on('input', async function () {

               var interval = $(this).val();
               console.log(interval);

               if (interval > 0) {
                   $("#chkbox-IsReapeating").prop('checked', true); 
               } else {
                   $("#chkbox-IsReapeating").prop('checked', false);
               }

               var bx = $("#chkbox-IsReapeating").prop('checked');
               console.log(bx);

               
           });




        </script>

}