
@{
    ViewBag.Title = "Dashboard";
    //title and description defined in controller
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";

}

<div class="row dashboard">
    @{Html.RenderPartial("_SideMenuView");}

    <div class="dashboard-main">
        <div class="row">
            <div class="col-md-12" style="margin:5px 20px;">
                <div style="margin-left:20px;">
                    <button class="btn btn-primary pull-left" id="sidenav-toggle" style="padding:5px 15px;margin-right:20px;"> 
                    <i class="fa fa-bars"> </i> </button>
                    <h1> Dashboard </h1>
                    <h3 class="text-muted"> @ViewBag.Today </h3>
                </div> 
                <hr />
            </div>
        </div>
        <div class="row">
            <div class="row-flex">

                @{Html.RenderPartial("_SummaryView");}

                <div class="col-md-12">
                    <div class="flex-inline-row">
                        @{Html.RenderPartial("_TripLogsView");}

                        @{Html.RenderPartial("_NotificationsView");}
                    </div>
                    <hr />
                </div>

                <div class="col-md-12">
                    <div class="flex-inline-row">
                        @{Html.RenderPartial("_PayablesView");}

                        @{Html.RenderPartial("_ReceivablesView");}
                    </div>
                    <hr />
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    @*<script src="~/Scripts/Chartjs/Chart.js"></script>*@
    <script>
        var chart;
        function triplogsChart(datalabels, dataset) {

            let dateToday = new Date();
            //$("#trip-chart-Month").val(dateToday.getMonth() + 1);
            //$("#trip-chart-Year").val(dateToday.getFullYear());

            chartMonth = $("#trip-chart-Month").val();
            chartYear = $("#trip-chart-Year").val();
            const labels = datalabels;
            let monthdays = 31;

            monthdays = DaysInMonth($("#trip-chart-Month").val() , $("#trip-chart-Year").val());

            console.log("monthdays: " + monthdays);
            
            let goal = 280;
            let goalperday =Math.floor(parseFloat(goal / monthdays ));
            let goalTotal = 0;
            let goalDataset = new Array();

            console.log("goalperday: " + goalperday);

            for (var i = 0; i <= monthdays; i++) {

                if (i > 20) {
                    goalperday = 8;
                }

                if (i > 26) {
                    goalperday = 9;
                }

                if (goalTotal < goal) {
                    goalTotal = goalTotal + (goalperday);
                }

                if (i == ( monthdays - 1)) {
                    goalTotal = goalTotal + (goal - goalTotal);
                }

                goalDataset.push(goalTotal);
            }

            const data = {
                labels: labels,
                datasets: [
                    {
                        label: 'Trip Count',
                        data: dataset,
                        borderColor: 'rgb(30,144,255)',
                        backgroundColor: 'rgb(30,144,255)',
                    },
                    {
                        label: 'Trip Goal',
                        data: goalDataset,
                        backgroundColor: 'rgb(255,99,71)',
                        borderColor: 'rgb(255,99,71)',
                    }
                ]
            };

            const config = {
                type: 'line',
                data: data,
                options: {
                    tension: 0.3,
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            grid: {
                                display: false
                            },

                            ticks: {
                                beginAtZero: true
                            }
                        },
                    }
                },

            };

            chart = new Chart(
                document.getElementById('myChart-triplogs'),
                config
            );
        }

        $('#trip-chart-Month, #trip-chart-Year').on('change', (e) => {
            // Destroy old graph
            if (chart) {
                chart.destroy();
            }

            GetChartData_TripLogs_Month();  

        })

        function SetMonthDefault() {
            let dateToday = new Date();
            $("#trip-chart-Month").val(dateToday.getMonth() + 1);
            $("#trip-chart-Year").val(dateToday.getFullYear());
        }

        function GetChartData() {
            $.get('/Dashboard/GetChartData', null, (jobs) => {

                var months = new Array();
                for (i = 0; i < jobs.length; i++) {
                    months.push(jobs[i]["Month"])
                }

                var data = new Array();

                for (i = 0; i < jobs.length; i++) {
                    data.push(jobs[i]["Count"])
                }

                jobsChart(months, data);
            });
        }

        function GetChartData_TripLogs() {

            $.get('/Dashboard/GetChartData_TripLogs', null, (jobs) => {

                var days = new Array();
                for (i = 0; i < jobs.length; i++) {
                    days.push(jobs[i]["Day"])
                }

                var data = new Array();

                for (i = 0; i < jobs.length; i++) {
                    if (jobs[i]["Count"] == 0) {
                        data.push(NaN)
                    } else {
                        data.push(jobs[i]["Count"])
                    }
                }

                triplogsChart(days, data);
            });
        }

        function GetChartData_TripLogs_Month() {

            var month = $('#trip-chart-Month :selected').val()
            var year = $('#trip-chart-Year :selected').val()
            $.get('/Dashboard/GetChartData_TripLogs', { month: month, year: year }, (jobs) => {

                var days = new Array();
                for (i = 0; i < jobs.length; i++) {
                    days.push(jobs[i]["Day"])
                }

                var data = new Array();

                for (i = 0; i < jobs.length; i++) {
                    if (jobs[i]["Count"] == 0) {
                        data.push(NaN)
                    } else {
                        data.push(jobs[i]["Count"])
                    }
                }

                triplogsChart(days, data);
            });
        }

        function DaysInMonth(month, year) {
            return new Date(year, month, 0).getDate();
        }

    </script>

    <script>
        $(() => {
            GetTotalSales();
            GetTotalExpenses();
            GetJobOrders();
            GetTripLogs();
            GetExpenses();
            GetReceivables();
            GetNotifications();
            GetJobOrdersCount();

            GetChartData_TripLogs();
            SetMonthDefault();

            sidebarMenu($('.sidebar-menu'));
        });

        function sidebarMenu(menu) {
            var animationSpeed = 300,
                subMenuSelector = '.sidebar-submenu';

            $(menu).on('click', 'li a', function (e) {
                var $this = $(this);
                var checkElement = $this.next();

                if (checkElement.is(subMenuSelector) && checkElement.is(':visible')) {
                    checkElement.slideUp(animationSpeed, function () {
                        checkElement.removeClass('menu-open');
                    });
                    checkElement.parent("li").removeClass("active");
                }

                //If the menu is not visible
                else if ((checkElement.is(subMenuSelector)) && (!checkElement.is(':visible'))) {
                    //Get the parent menu
                    var parent = $this.parents('ul').first();
                    //Close all open menus within the parent
                    var ul = parent.find('ul:visible').slideUp(animationSpeed);
                    //Remove the menu-open class from the parent
                    ul.removeClass('menu-open');
                    //Get the parent li
                    var parent_li = $this.parent("li");

                    //Open the target menu and add the menu-open class
                    checkElement.slideDown(animationSpeed, function () {
                        //Add the class active to the parent li
                        checkElement.addClass('menu-open');
                        parent.find('li.active').removeClass('active');
                        parent_li.addClass('active');
                    });
                }
                //if this isn't a link, prevent the page from being redirected
                if (checkElement.is(subMenuSelector)) {
                    e.preventDefault();
                }
            });
        }

        $("#sidenav-toggle").click(() => {
            //toggle side navigation (hide/show)
            $(".dashboard-sidebar").toggle(300);
        });

        function GetTotalSales() {
            $.get('/Dashboard/GetSalesThisMonth', null, (sales) => {
                //console.log(sales);
                $('#Sales-TotalAmount').text("P " +sales);
            });
        }

        function GetTotalExpenses() {
            $.get('/Dashboard/GetExpensesThisMonth', null, (expenses) => {
                //console.log(expenses);
                $('#Expenses-TotalAmount').text("P "+expenses);
            });
        }

        function GetJobOrdersCount() {
            $.get('/Dashboard/GetActiveJobsCount', null, (jobs) => {
                //console.log("Active Jobs");
                //console.log(jobs);
                $('#ActiveJobsCount').text(jobs);
            });
        }

        function GetJobOrders() {
            $.get('/Dashboard/GetActiveJobs', null, (jobs) => {
                //console.log(jobs);
                AddJobsToList(jobs);
            });
        }

        function GetTripLogs() {
            $.get('/Dashboard/GetActiveTriplogs', null, (logs) => {
                //console.log(logs);
                AddTripLogsToList(logs);
            });
        }

        function GetExpenses() {
            $.get('/Dashboard/GetActiveExpenses', null, (expenses) => {
                AddExpensesToList(expenses);
            });
        }

        function GetReceivables() {
            $.get('/Dashboard/GetActiveReceivables', null, (receivables) => {
                console.log("receivables");
                console.log(receivables);
                AddReceivablesToList(receivables);
            });
        }

        function GetNotifications() {
            $.get('/Dashboard/GetNotifications', null, (notifications) => {
                AddNotificationsToList(notifications);
            });
        }

        function AddJobsToList(jobs) {
            if (jobs.length > 0) {
                for (var i = 0; i < jobs.length; i++ ){
                    var color = "default";
                    var jobRow = "";

                    if (jobs[i]["Status"] == "CONFIRMED") {
                        color = "success";
                    } else if (jobs[i]["Status"] == "INQUIRY"){
                        color = "primary";
                    } else if (jobs[i]["Status"] == "RESERVATION") {
                        color = "info";
                    } else {
                        color = "default";
                    }

                    var dateToday = moment(new Date()).format("MM/DD/YYYY");
                    console.log("JobEncodeDate: " + jobs[i]["JobEncodeDate"])
                    console.log("Date: " + dateToday)

                    var newJobToday = "";
                    if (jobs[i]["JobEncodeDate"] == dateToday) {
                        newJobToday = "<span class='label label-info'> NEW </span> ";
                    }

                    if (window.mobileCheck()) {

                        jobRow = "<tr>" +
                            "<td><span style='font-weight:600;'>" + jobs[i]["Id"] + "</span> <br> " + newJobToday +
                            "<span class='label label-" + color + " show-on-mobile-only'>" + jobs[i]["Status"] + "</span> </td>" +
                            "<td><span class='no-margin-bottom text-bold'>" + jobs[i]["Description"] + "</span><br>" +
                            "<span class='text-muted'>" + jobs[i]["StartDate"] + " - " + jobs[i]["EndDate"] + "</span></td>";

                        jobRow = jobRow + "<td><span class='text-success'>" + jobs[i]["Amount"].toLocaleString() + "</span></td>" +
                            "</tr>";
                    } else {

                        jobRow = "<tr>" +
                            "<td><span style='font-weight:600;'>" + jobs[i]["Id"] + "</span> <br> " +
                            "<span class='label label-" + color + " show-on-mobile-only'>" + jobs[i]["Status"] + "</span> </td>" +
                            "<td><span class='no-margin-bottom text-bold'>" + jobs[i]["Description"] + "</span><br>" +
                            "<span class='text-muted'>" + jobs[i]["StartDate"] + " - " + jobs[i]["EndDate"] + "</span></td>";

                        jobRow = jobRow + "<td class='hidden-on-mobile'> " + newJobToday
                            + " &nbsp; <span class='label label-" + color + "'>" + jobs[i]["Status"] + "</span></td>";

                        jobRow = jobRow + "<td><span class='text-success'>" + jobs[i]["Amount"].toLocaleString() + "</span></td>" +
                            "</tr>";
                    }
                     
                    $("#JobsTable").append(jobRow);
                }
            }
        }


        function GetStatus(jobStatus) {
            switch (jobStatus) {
                case 'CONFIRMED':
                    return " <span class='label label-success'>" + jobStatus + "</span>";
                case 'INQUIRY':
                    return " <span class='label label-primary'>" + jobStatus + "</span>";
                case 'RESERVATION':
                    return " <span class='label label-info'>" + jobStatus + "</span>";
                case 'CANCELLED':
                    return " <span class='label label-default'>" + jobStatus + "</span>";
                case 'CLOSED':
                    return " <span class='label label-success'>" + jobStatus + "</span>";
                default:
                    return " <span class='label label-default'>" + jobStatus + "</span>";
            }
        }

        function AddTripLogsToList(logs) {
            if (logs.length > 0) {
                for (var i = 0; i < logs.length; i++) {
                   
                    var logsRow = "<tr>" +
                        "<td><i class='fa fa-car'> </i> <span>" + logs[i]["Unit"] + "</span>" +
                        "<p class='show-on-mobile-only'> <i class='fa fa-user'> </i> <span>" + logs[i]["Driver"] + "</span></p> </td>" +
                        "<td class='hidden-on-mobile'><i class='fa fa-user'> </i> <span>" + logs[i]["Driver"] + "</span></td>";

                    if (logs[i]["Description"] == "Available") {
                        logsRow = logsRow + "<td><span class='status-circle-green'></span> <span>" + logs[i]["Description"] + "</span></td>";
                    } else {
                        logsRow = logsRow + "<td><span>" + logs[i]["Description"] + "</span></td>";
                    }

                        logsRow = logsRow + "<td><span'>" + logs[i]["JobId"] + "</span></td></tr>";
                    $("#TripLogsTable").append(logsRow);
                }
            }
        }

        function AddExpensesToList(expenses) {
            if (expenses.length > 0) {
                for (var i = 0; i < expenses.length; i++) {

                    var expensesRow = "<tr>" +
                        "<td> <span> "+ expenses[i]["Transaction"] +"</span> <br />" +
                        "<span class='text-muted'>"+ moment(expenses[i]["Date"]).format("MMM DD YYYY") +"</span></td>" +
                        "<td> <span class='label label-primary'>"+ expenses[i]["Status"] +"</span></td>" +
                        "<td>" + expenses[i]["Amount"].toLocaleString() +"</td>" +
                        "</tr>";
                    $("#ExpensesTable").append(expensesRow);
                }
            }
        }

        function AddReceivablesToList(receivables) {
            if (receivables.length > 0) {
                for (var i = 0; i < receivables.length; i++) {

                    var receivablesRow = "<tr>" +
                        "<td> <span> " + receivables[i]["Account"] + "</span>   <br />" +
                        " <span class='text-muted'> " + receivables[i]["Contact"] + "</span><br /></td>" +
                        "<td> <span> " + receivables[i]["Transaction"] + "</span> <br />" +
                        " <span class='text-muted'>" + moment(receivables[i]["StartDate"]).format("MMM DD YYYY") + 
                        " - " + moment(receivables[i]["EndDate"]).format("MMM DD YYYY")  +"</span></td>" +
                        "<td>" + receivables[i]["Amount"].toLocaleString() + " / <span class='text-success'>" + receivables[i]["Payment"].toLocaleString() + " </span> " +
                        "<br> <span class='label label-primary '>" + receivables[i]["Status"] + "</span>" + " </td>" +

                        "</tr>";

                    $("#ReceivablesTable").append(receivablesRow);
                }
            }
        }

        function AddNotificationsToList(notification) {
            if (notification.length > 0) {
                for (var i = 0; i < notification.length; i++) {
                
                    var notificationsRow = "<tr>" +
                        "<td> </i> <span class='text-muted'>" + notification[i]["Header"] + "</span></br>" +
                        " <a href='" + notification[i]["Link"] +"' target='_blank'>" + notification[i]["Message"] +"</a></td>" +
                        "</tr>";
                    $("#NotificationsTable").append(notificationsRow);
                }
            }
        }

        window.mobileCheck = function () {
            let check = false;
            (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);
            return check;
        };
    </script>

}