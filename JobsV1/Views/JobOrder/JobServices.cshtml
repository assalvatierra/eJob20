@model IEnumerable<JobsV1.Models.JobServices>

@{
    ViewBag.Title = "Services";
    Layout = "~/Views/Shared/_ModuleLayout.cshtml";
    System.Collections.ArrayList providers = ViewBag.Providers;
    var iti = ViewBag.Itineraries;
}




<div class="modal fade" id="aContractorLink" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Contractor / PO</h4>
            </div>

            <div class="modal-body" id="modal2-content">
                
                    @foreach (var item in providers)
                    {
                       
                                if ((string)item == "Provider not defined.")
                                { <p>@item</p> }
                                else
                                {
                                    @Html.ActionLink("[" + @item + "]", "SubDetails", "JobMains", new { id = ViewBag.JobOrder.Id, sProvider = @item }, new { @class = "list-group-item" })
                                }
                          
                    }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->


@*<div id="dialog" title="Service Provider">
    <table>
        @foreach (var item in providers)
            {
            <tr>
                <td style="white-space:nowrap">
                    @if ((string)item == "Provider not defined.")
                    { <p>@item</p> }
                    else
                    {
                    @Html.ActionLink("[" + @item + "]", "SubDetails", "JobMains", new { id = ViewBag.JobOrder.Id, sProvider = @item }, null)
                    }
                </td>
            </tr>
        }
    </table>
</div>*@

<h3>Job Order: @ViewBag.JobOrder.Customer.Name</h3>
<div>
    <p>
        Date: @ViewBag.JobOrder.JobDate.ToString("dd/MMM/yyyy")
        <br />Description: @ViewBag.JobOrder.Description
        <br />Encoder: @ViewBag.JobEncoder.user - @ViewBag.JobEncoder.dtTrail 
        <br />Status: @ViewBag.JobStatus

         <!-- Change Status -->
        @if(ViewBag.JobStatus == "INQUIRY") { 
            @Html.ActionLink("(Reserve Job) | ", "ReserveJobStatus", "JobOrder", new { id = ViewBag.JobOrder.Id }, null) 
            @Html.ActionLink("(Confirm Job)", "ConfirmJobStatus", "JobOrder", new { id = ViewBag.JobOrder.Id }, null) 
        }

        @if (ViewBag.JobStatus == "RESERVATION")
        {
            @Html.ActionLink("(Confirm Job)", "ConfirmJobStatus", "JobOrder", new { id = ViewBag.JobOrder.Id }, null)
        }

        <br />@Html.ActionLink("Edit", "JobDetails", "JobOrder", new { jobid = ViewBag.JobOrder.Id }, null)
        | @Html.ActionLink("Booking", "BookingDetails", "JobOrder", new { id = ViewBag.JobOrder.Id }, null) 
        | <a id="aContractorLink"  data-toggle="modal" data-target="#aContractorLink" >Contractors</a>
        | @Html.ActionLink("Invoice", "BookingDetails", "JobOrder", new { id = ViewBag.JobOrder.Id, iType = 1 }, null)
       @* | @Html.ActionLink("Cash Expenses", "JobExpenses", "CashExpenses", new { id = ViewBag.JobOrder.Id }, null)*@




        @if (ViewBag.JobStatus == "INQUIRY")
        {
            <text>
            | <a onclick = "ajaxSendQuotation(@ViewBag.JobOrder.Id)" > Send Quotation </a>
            </text>
        }

        @if (ViewBag.JobStatus == "RESERVATION")
        {
            <text>
            | <a onclick="ajaxSendReservation(@ViewBag.JobOrder.Id)"> Send Reservation </a>
            </text>
        }

        @*| @Html.ActionLink("Send Quotation", "SendEmailQuotation", "JobOrder", new { id = ViewBag.JobOrder.Id }, null)*@
    </p>  
    <p>
        Services | 
        @Html.ActionLink("Itinerary", "JobItinerary", "JobItineraries", new { id = ViewBag.JobOrder.Id }, null) |
        @Html.ActionLink("Notes", "JobNotes", "JobMains", new { id = ViewBag.JobOrder.Id }, null) |
        @Html.ActionLink("Payments", "Payments", "JobPayments", new { id = ViewBag.JobOrder.Id }, null) | 
        @Html.ActionLink("Expenses",  "CashExpenses", "JobExpenses", new { jobId = ViewBag.JobOrder.Id }, null)
    </p>
</div>

<h2>Services</h2>

<table class="table">
    <tr>
        <th>
            Type
        </th>
        <th>
            Particulars
        </th>
        <th>
            Supplier Items
        </th>
        <th>
            Supplier
        </th>
        <th></th>
    </tr>

@foreach (var item in Model)
{
    JobsV1.Models.JobServicePickup pickup = item.JobServicePickups.FirstOrDefault();

    <tr>
        <td style="white-space:nowrap">
            @Html.DisplayFor(modelItem => item.Service.Name)
            @{
                string sStart = ((DateTime)item.DtStart).ToString("MMM-dd-yyyy (ddd)");
                string sEnd = ((DateTime)item.DtEnd).ToString("MMM-dd-yyyy (ddd)");
            }
            <p>
                Start: @sStart
                <br />
                End: @sEnd
            </p>

        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Particulars)
            <br />[Quote: @Html.DisplayFor(modelItem => item.QuotedAmt)]
            <br />[Supplier: @Html.DisplayFor(modelItem => item.SupplierAmt)]
            <br />[Remarks: @Html.DisplayFor(modelItem => item.Remarks)]
        </td>
        <td width="150">
            @foreach (var svc in item.JobServiceItems)
            {
                @Html.DisplayFor(modelItem => svc.InvItem.ItemCode)
                <br />
                @Html.DisplayFor(modelItem => svc.InvItem.Description)
                <span>&nbsp;</span>
                @Html.ActionLink("[x]", "JsRemoveItem", new { ItemId = svc.InvItemId , serviceId = item.Id })
                
                <br />
            }
            @Html.ActionLink("Add Item", "BrowseInvItem_withScheduleJS", new { JobServiceId = item.Id })
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Supplier.Name)
            <br />[ Make/Model: @Html.DisplayFor(modelItem => item.SupplierItem.Description) ]
        </td>
        <td>
            @Html.ActionLink("Edit", "JobServiceEdit", new { id = item.Id }) |
            @Html.ActionLink("Delete", "JobSvcDelete", new { id = item.Id })
            <br />
            @Html.ActionLink("Pickup", "InitServicePickup", new { id = item.Id }) |
            @Html.ActionLink("Itinerary", "JobItinerary", "JobItineraries", new { id = ViewBag.JobOrder.Id, SvcId = item.Id }, null) | 
            @Html.ActionLink("Text Form", "TextMessage", new { id = item.Id })  |
            @Html.ActionLink("Send Notification", "Notification", new { id = item.Id }) | 
            @Html.ActionLink("Expenses", "JobExpenses", "JobExpenses", new { id = item.Id }, null)
        </td>
    </tr>
    <tr>
        <td colspan="4" style="border-top:none">
        @{string sIti = "";
            foreach (var ititmp in iti)
            {
                if (ititmp.SvcId == item.Id)
                {
                    if (sIti.Trim() != "") { sIti += ","; }
                    else { sIti += "Destinations:"; }

                    sIti += " " + ititmp.Destination.Description;
                }
            }

        }

        <span style="font:14px arial, verdana;">
            @sIti
        </span>

        </td>
    </tr>

    <tr>
        <td colspan="4" style="border-top:none">
            @if (pickup != null)
                {
                <span style="font:bold 12px arial, verdana;">
                    [ Time: @pickup.JsTime @pickup.JsLocation ]  &nbsp; &nbsp;
                    [ Contact: @pickup.ClientName / <a href="tel:@pickup.ClientContact">@pickup.ClientContact</a> ] &nbsp; &nbsp;
                    [ InCharge: @pickup.ProviderName / <a href="tel:@pickup.ProviderContact">@pickup.ProviderContact</a> ]
                </span>
            }
        </td>
    </tr>

}

</table>
<p>
    @Html.ActionLink("Create New", "JobServiceAdd", new { JobMainId = ViewBag.JobMainId })
    <br />@Html.ActionLink("Add Template", "BrowseTemplate", new { JobMainId = ViewBag.JobMainId })
    <br />    @Html.ActionLink("Go to JobOrder", "Index", "JobOrder", new { mainid = ViewBag.JobMainId, sortid = ViewBag.sortid }, null)
    <br />@Html.ActionLink("Go to Sales Lead", "Index", "SalesLeads",null,null)
</p>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>

            //var dlg;
            //$(function () {
            //    // Initialize Dialog
            //    dlg = $("#dialog").dialog({
            //        autoOpen: false,
            //        modal: true,
            //        buttons:
            //            {
            //                Close: function () {
            //                    dlg.dialog("close");
            //                }
            //            }
            //    });

            //    // Initialize Controls
            //    $("#aContractorLink").click(function (event) {
            //        dlg.dialog("open");
            //        event.preventDefault();
            //    });
            //});


            $(document).ready(function () {
                //LoadOverlay();
                jobActionDisplay(@ViewBag.jobAction);
            });
            

            function jobActionDisplay(action){
                alert(action);
            }

            //SEND Quotation to client in email
            function ajaxSendQuotation(jobId) {
                var data = {
                    jobId: jobId,
                    docType: "QUOTATION"
                }

                console.log(jobId);
                var serviceURL = '/JobOrder/SendEmailBooking';
                console.log("sending email");

                //loading screen
                LoadOverlay();

                //send email using ajax
                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: JSON.stringify(data),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function () {
                        console.log('success');
                        disableLoadOverlay();
                        console.log("email sent");
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(jqXHR.responseText);
                        $("#overlay2-text").text(jqXHR.responseText);
                        disableLoadOverlay();
                        console.log("Email Sent");
                    }
                });
            }

            //SEND RESERVATION DETAILS IN EMAIL TO CLIENT 
            function ajaxSendReservation(jobId) {
                var data = {
                    jobId: jobId,
                    docType: "RESERVATION"
                }

                console.log(jobId);
                var serviceURL = '/JobOrder/SendEmailBooking';
                console.log("sending email");

                //loading screen
                LoadOverlay();

                //send email using ajax
                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: JSON.stringify(data),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function () {
                        console.log('success');
                        disableLoadOverlay();
                        console.log("email sent");
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(jqXHR.responseText);
                        $("#overlay2-text").text(jqXHR.responseText);
                        disableLoadOverlay();
                        console.log("Email Sent");
                    }
                });
            }

            function LoadOverlay() {
                console.log("load overlay");
                $("#overlay2").css("display", "flex");
            }

            function disableLoadOverlay() {
                console.log("disable overlay");
                $("#overlay2").css("display", "none");
            }
    </script>
}
