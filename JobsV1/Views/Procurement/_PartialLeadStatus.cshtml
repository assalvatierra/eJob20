@model  JobsV1.Models.SalesLead

@{
    Layout = null;

    string USER = ViewBag.User as string;
    bool ISADMIN = ViewBag.IsAdmin;
    string AssignedTo = ViewData["AssignedTo"] as string;

    string ActivityStatusType = ViewBag.ActivityStatusType;
    var SalesStatCode = (List<JobsV1.Models.SalesStatusCode>)ViewBag.StatusCodes;

    var BIDDING = "Bidding Only";
    var FIRM = "Firm Inquiry";
    var BUYING = "Buying Inquiry";

    var item = Model;
}



@{
    bool ForApproveOnce = false;
}
@foreach (var salesstat in SalesStatCode)
{
    if (item.SalesStatus.Where(s => s.SalesStatusStatusId == 1).Select(s => s.SalesStatusCodeId).Contains(salesstat.Id))
    {
        //Active Status
        <span>&#187;</span>
        <span class="btn btn-success btn-arrow-right">
            <span class="link-white"> @salesstat.Name </span>
        </span>

    }
    else
    {
        var OneMLimit = 1000000;
        var ThreeMLimit = 3000000;

        if (salesstat.Id == 7 || salesstat.Id == 8)
        {
            // REJECT = 7, CLOSED = 8
            <span>&#187;</span>
            <button class="btn btn-primary btn-arrow-right cursor-hand">
                <a class="link-white link-status" onclick="UpdateLeadStatusRemarks(this, @item.Id, @salesstat.Id)"> @salesstat.Name </a>
            </button>
        }
        else if (salesstat.Id == 5)
        {

            var actStatusType = ActivityStatusType;

            //APPROVED - 5
            if (((item.Price > OneMLimit && item.Price < ThreeMLimit) && actStatusType == BIDDING) ||
                ((item.Price <= OneMLimit) && (actStatusType == FIRM || actStatusType == BUYING)) ||
                  item.Price > ThreeMLimit ||
                ((item.Price > OneMLimit && item.Price < ThreeMLimit) && (actStatusType == FIRM || actStatusType == BUYING))
                 )
            {
                //disable status
                <span>&#187;</span>
                <button class="btn btn-primary btn-arrow-right" style="cursor:no-drop;">
                    <a class="link-white link-status"> @salesstat.Name </a>
                </button>

            }
            else
            {
                <span>&#187;</span>
                <button class="btn btn-primary btn-arrow-right cursor-hand ">
                    <a class="link-white link-status" onclick="UpdateLeadStatus(this, @item.Id, @salesstat.Id)"> @salesstat.Name </a>
                </button>
            }

        }
        else if (salesstat.Id == 15 || salesstat.Id == 16)
        {
            //approved by Aldrin OR Approved by Mario
            var statusCode = item.SalesStatus.Where(s => s.SalesStatusCodeId == 15 || s.SalesStatusCodeId == 16).ToList();

            var actStatusType = ActivityStatusType;
            bool isApproved = false;

            if (statusCode.Count() > 0)
            {
                isApproved = true;
            }

            if ((item.Price > OneMLimit && item.Price < ThreeMLimit) ||
                ((item.Price > OneMLimit && item.Price < ThreeMLimit) && actStatusType == BIDDING) ||
                ((item.Price <= OneMLimit) && (actStatusType == FIRM || actStatusType == BUYING)))
            {
                //Check if user is allowed to approved
                if (salesstat.SalesStatusRestrictions.Where(s => s.SalesStatusAllowedUser.User == USER).FirstOrDefault() != null)
                {
                    var allowedUser = salesstat.SalesStatusRestrictions.Where(s => s.SalesStatusAllowedUser.User == USER)
                        .FirstOrDefault().SalesStatusAllowedUser.User;
                    if (allowedUser == USER)
                    {
                        //if not yet approved, allow user to approve
                        if (!isApproved)
                        {
                            <span>&#187;</span>
                            <button class="btn btn-primary btn-arrow-right cursor-hand ">
                                <a class="link-white link-status" onclick="UpdateLeadStatus(this, @item.Id, @salesstat.Id)"> @salesstat.Name </a>
                            </button>
                        }
                        else
                        {
                            //disable status
                            <span>&#187;</span>
                            <button class="btn btn-primary btn-arrow-right" style="cursor:no-drop;">
                                <a class="link-white link-status"> @salesstat.Name </a>
                            </button>
                        }
                    }
                    else
                    {
                        //disable status
                        <span>&#187;</span>
                        <button class="btn btn-primary btn-arrow-right" style="cursor:no-drop;">
                            <a class="link-white link-status"> @salesstat.Name </a>
                        </button>
                    }
                }
                else
                {
                    if (!ForApproveOnce && !isApproved)
                    {
                        ForApproveOnce = true;
                        @*<span>&#187;</span>
                            <button class="btn btn-primary btn-arrow-right" style="cursor:no-drop;">
                                <a class="link-white link-status"> APPROVED BY MARIO/ALDRIN </a>
                            </button>*@
                    }
                }
            }


            //Requires Two Approval
            //Price is 3M OR 1M AND status type is Firm Inquiry or Buying Inquiry
            if (item.Price > ThreeMLimit || (item.Price > ThreeMLimit && actStatusType == BIDDING) ||
              ((item.Price > OneMLimit && item.Price < ThreeMLimit) && (actStatusType == FIRM || actStatusType == BUYING)))
            {
                //approved by Aldrin AND Approved by Mario
                if (salesstat.SalesStatusRestrictions.Where(s => s.SalesStatusAllowedUser.User == USER).FirstOrDefault() != null)
                {
                    var allowedUser = salesstat.SalesStatusRestrictions.Where(s => s.SalesStatusAllowedUser.User == USER)
                        .FirstOrDefault().SalesStatusAllowedUser.User;
                    if (allowedUser == USER)
                    {
                        <span>&#187;</span>
                        <button class="btn btn-primary btn-arrow-right cursor-hand ">
                            <a class="link-white link-status" onclick="UpdateLeadStatus(this, @item.Id, @salesstat.Id)"> @salesstat.Name </a>
                        </button>
                    }
                    else
                    {
                        //disable status
                        <span>&#187;</span>
                        <button class="btn btn-primary btn-arrow-right" style="cursor:no-drop;">
                            <a class="link-white link-status"> @salesstat.Name </a>
                        </button>
                    }
                }

                if (salesstat.SalesStatusRestrictions.Where(s => s.SalesStatusAllowedUser.User != USER).FirstOrDefault() != null)
                {
                    var OtherallowedUsers = salesstat.SalesStatusRestrictions.Where(s => s.SalesStatusAllowedUser.User != USER)
                        .ToList();


                    foreach (var otherUsers in OtherallowedUsers)
                    {
                        <span>&#187;</span>
                        <button class="btn btn-primary btn-arrow-right" style="cursor:no-drop;">
                            <a class="link-white link-status"> @salesstat.Name </a>
                        </button>
                    }

                }

            }

        }
        else
        {
            <span>&#187;</span>
            <button class="btn btn-primary btn-arrow-right cursor-hand ">
                <a class="link-white link-status" onclick="UpdateLeadStatus(this, @item.Id, @salesstat.Id)"> @salesstat.Name </a>
            </button>
        }

    }
}